https://leetcode.com/problems/binary-tree-right-side-view/description/

Recursive Approach -----
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        traversal(root , 0 , res);
        return res ;
        
    }
      void traversal (TreeNode node, int level , List<Integer> res)
     {
          if(node  == null) return ;
          if(level == res.size())
          {
              res.add(node.val); 
          }
          traversal(node.right , level+1 , res);
          traversal(node.left , level+1 , res);
     }
}

Iterative approach -----
we use Deque instead of Queue , becoz we need last element of queue
class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
     Queue<Node> mq = new ArrayDeque<>();
      ArrayDeque<Node> hq = new ArrayDeque<>();
      ArrayList<Integer>  res = new ArrayList<>();
      if(root == null) return res ;
      mq.add(root);
      res.add(root.data);
      
      while(!mq.isEmpty())
      {
          Node rem = mq.remove();
          if(rem.left!= null) hq.add(rem.left);
          if(rem.right!= null) hq.add(rem.right);
          
          if(mq.size() == 0)
          {
              if(hq.size()>0)
              { TreeNode last = hq.getLast();
              res.add(last.data);
              }
              mq = hq;
              hq = new ArrayDeque<>();
          }
      }
      return res;
    }
}
